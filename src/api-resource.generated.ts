// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/**
 * Represents a resource or collection of resources.
 */
export interface IApiResource {
  /**
   * The group portion of the API version (e.g. `authorization.k8s.io`).
   */
  readonly apiGroup: string;

  /**
   * The name of a resource type as it appears in the relevant API endpoint.
   * @example - "pods" or "pods/log"
   * @see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#referring-to-resources
   */
  readonly type?: string;

  /**
   * The unique, namespace-global, name of an object inside the Kubernetes cluster
   */
  readonly name?: string;
}

/**
 * Options for `ApiResource`.
 */
export interface ApiResourceOptions {
  /**
   * The group portion of the API version (e.g. `authorization.k8s.io`).
   */
  readonly apiGroup: string;

  /**
   * The name of the resource type as it appears in the relevant API endpoint.
   * @example - "pods" or "pods/log"
   * @see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#referring-to-resources
   */
  readonly type: string;
}

/**
 * Represents information about an API resource type.
 */
export class ApiResource implements IApiResource {
  /**
   * API resource information for Binding.
   */
  public static readonly BINDING = new ApiResource({
    apiGroup: '',
    type: 'bindings',
  });

  /**
   * API resource information for ComponentStatus.
   */
  public static readonly COMPONENT_STATUS = new ApiResource({
    apiGroup: '',
    type: 'componentstatuses',
  });

  /**
   * API resource information for ConfigMap.
   */
  public static readonly CONFIG_MAP = new ApiResource({
    apiGroup: '',
    type: 'configmaps',
  });

  /**
   * API resource information for Endpoints.
   */
  public static readonly ENDPOINTS = new ApiResource({
    apiGroup: '',
    type: 'endpoints',
  });

  /**
   * API resource information for Event.
   */
  public static readonly EVENT = new ApiResource({
    apiGroup: '',
    type: 'events',
  });

  /**
   * API resource information for LimitRange.
   */
  public static readonly LIMIT_RANGE = new ApiResource({
    apiGroup: '',
    type: 'limitranges',
  });

  /**
   * API resource information for Namespace.
   */
  public static readonly NAMESPACE = new ApiResource({
    apiGroup: '',
    type: 'namespaces',
  });

  /**
   * API resource information for Node.
   */
  public static readonly NODE = new ApiResource({
    apiGroup: '',
    type: 'nodes',
  });

  /**
   * API resource information for PersistentVolumeClaim.
   */
  public static readonly PERSISTENT_VOLUME_CLAIM = new ApiResource({
    apiGroup: '',
    type: 'persistentvolumeclaims',
  });

  /**
   * API resource information for PersistentVolume.
   */
  public static readonly PERSISTENT_VOLUME = new ApiResource({
    apiGroup: '',
    type: 'persistentvolumes',
  });

  /**
   * API resource information for Pod.
   */
  public static readonly POD = new ApiResource({
    apiGroup: '',
    type: 'pods',
  });

  /**
   * API resource information for PodTemplate.
   */
  public static readonly POD_TEMPLATE = new ApiResource({
    apiGroup: '',
    type: 'podtemplates',
  });

  /**
   * API resource information for ReplicationController.
   */
  public static readonly REPLICATION_CONTROLLER = new ApiResource({
    apiGroup: '',
    type: 'replicationcontrollers',
  });

  /**
   * API resource information for ResourceQuota.
   */
  public static readonly RESOURCE_QUOTA = new ApiResource({
    apiGroup: '',
    type: 'resourcequotas',
  });

  /**
   * API resource information for Secret.
   */
  public static readonly SECRET = new ApiResource({
    apiGroup: '',
    type: 'secrets',
  });

  /**
   * API resource information for ServiceAccount.
   */
  public static readonly SERVICE_ACCOUNT = new ApiResource({
    apiGroup: '',
    type: 'serviceaccounts',
  });

  /**
   * API resource information for Service.
   */
  public static readonly SERVICE = new ApiResource({
    apiGroup: '',
    type: 'services',
  });

  /**
   * API resource information for MutatingWebhookConfiguration.
   */
  public static readonly MUTATING_WEBHOOK_CONFIGURATION = new ApiResource({
    apiGroup: 'admissionregistration.k8s.io',
    type: 'mutatingwebhookconfigurations',
  });

  /**
   * API resource information for ValidatingWebhookConfiguration.
   */
  public static readonly VALIDATING_WEBHOOK_CONFIGURATION = new ApiResource({
    apiGroup: 'admissionregistration.k8s.io',
    type: 'validatingwebhookconfigurations',
  });

  /**
   * API resource information for CustomResourceDefinition.
   */
  public static readonly CUSTOM_RESOURCE_DEFINITION = new ApiResource({
    apiGroup: 'apiextensions.k8s.io',
    type: 'customresourcedefinitions',
  });

  /**
   * API resource information for APIService.
   */
  public static readonly API_SERVICE = new ApiResource({
    apiGroup: 'apiregistration.k8s.io',
    type: 'apiservices',
  });

  /**
   * API resource information for ControllerRevision.
   */
  public static readonly CONTROLLER_REVISION = new ApiResource({
    apiGroup: 'apps',
    type: 'controllerrevisions',
  });

  /**
   * API resource information for DaemonSet.
   */
  public static readonly DAEMON_SET = new ApiResource({
    apiGroup: 'apps',
    type: 'daemonsets',
  });

  /**
   * API resource information for Deployment.
   */
  public static readonly DEPLOYMENT = new ApiResource({
    apiGroup: 'apps',
    type: 'deployments',
  });

  /**
   * API resource information for ReplicaSet.
   */
  public static readonly REPLICA_SET = new ApiResource({
    apiGroup: 'apps',
    type: 'replicasets',
  });

  /**
   * API resource information for StatefulSet.
   */
  public static readonly STATEFUL_SET = new ApiResource({
    apiGroup: 'apps',
    type: 'statefulsets',
  });

  /**
   * API resource information for TokenReview.
   */
  public static readonly TOKEN_REVIEW = new ApiResource({
    apiGroup: 'authentication.k8s.io',
    type: 'tokenreviews',
  });

  /**
   * API resource information for LocalSubjectAccessReview.
   */
  public static readonly LOCAL_SUBJECT_ACCESS_REVIEW = new ApiResource({
    apiGroup: 'authorization.k8s.io',
    type: 'localsubjectaccessreviews',
  });

  /**
   * API resource information for SelfSubjectAccessReview.
   */
  public static readonly SELF_SUBJECT_ACCESS_REVIEW = new ApiResource({
    apiGroup: 'authorization.k8s.io',
    type: 'selfsubjectaccessreviews',
  });

  /**
   * API resource information for SelfSubjectRulesReview.
   */
  public static readonly SELF_SUBJECT_RULES_REVIEW = new ApiResource({
    apiGroup: 'authorization.k8s.io',
    type: 'selfsubjectrulesreviews',
  });

  /**
   * API resource information for SubjectAccessReview.
   */
  public static readonly SUBJECT_ACCESS_REVIEW = new ApiResource({
    apiGroup: 'authorization.k8s.io',
    type: 'subjectaccessreviews',
  });

  /**
   * API resource information for HorizontalPodAutoscaler.
   */
  public static readonly HORIZONTAL_POD_AUTOSCALER = new ApiResource({
    apiGroup: 'autoscaling',
    type: 'horizontalpodautoscalers',
  });

  /**
   * API resource information for CronJob.
   */
  public static readonly CRON_JOB = new ApiResource({
    apiGroup: 'batch',
    type: 'cronjobs',
  });

  /**
   * API resource information for Job.
   */
  public static readonly JOB = new ApiResource({
    apiGroup: 'batch',
    type: 'jobs',
  });

  /**
   * API resource information for CertificateSigningRequest.
   */
  public static readonly CERTIFICATE_SIGNING_REQUEST = new ApiResource({
    apiGroup: 'certificates.k8s.io',
    type: 'certificatesigningrequests',
  });

  /**
   * API resource information for Lease.
   */
  public static readonly LEASE = new ApiResource({
    apiGroup: 'coordination.k8s.io',
    type: 'leases',
  });

  /**
   * API resource information for EndpointSlice.
   */
  public static readonly ENDPOINT_SLICE = new ApiResource({
    apiGroup: 'discovery.k8s.io',
    type: 'endpointslices',
  });

  /**
   * API resource information for FlowSchema.
   */
  public static readonly FLOW_SCHEMA = new ApiResource({
    apiGroup: 'flowcontrol.apiserver.k8s.io',
    type: 'flowschemas',
  });

  /**
   * API resource information for PriorityLevelConfiguration.
   */
  public static readonly PRIORITY_LEVEL_CONFIGURATION = new ApiResource({
    apiGroup: 'flowcontrol.apiserver.k8s.io',
    type: 'prioritylevelconfigurations',
  });

  /**
   * API resource information for IngressClass.
   */
  public static readonly INGRESS_CLASS = new ApiResource({
    apiGroup: 'networking.k8s.io',
    type: 'ingressclasses',
  });

  /**
   * API resource information for Ingress.
   */
  public static readonly INGRESS = new ApiResource({
    apiGroup: 'networking.k8s.io',
    type: 'ingresses',
  });

  /**
   * API resource information for NetworkPolicy.
   */
  public static readonly NETWORK_POLICY = new ApiResource({
    apiGroup: 'networking.k8s.io',
    type: 'networkpolicies',
  });

  /**
   * API resource information for RuntimeClass.
   */
  public static readonly RUNTIME_CLASS = new ApiResource({
    apiGroup: 'node.k8s.io',
    type: 'runtimeclasses',
  });

  /**
   * API resource information for PodDisruptionBudget.
   */
  public static readonly POD_DISRUPTION_BUDGET = new ApiResource({
    apiGroup: 'policy',
    type: 'poddisruptionbudgets',
  });

  /**
   * API resource information for PodSecurityPolicy.
   */
  public static readonly POD_SECURITY_POLICY = new ApiResource({
    apiGroup: 'policy',
    type: 'podsecuritypolicies',
  });

  /**
   * API resource information for ClusterRoleBinding.
   */
  public static readonly CLUSTER_ROLE_BINDING = new ApiResource({
    apiGroup: 'rbac.authorization.k8s.io',
    type: 'clusterrolebindings',
  });

  /**
   * API resource information for ClusterRole.
   */
  public static readonly CLUSTER_ROLE = new ApiResource({
    apiGroup: 'rbac.authorization.k8s.io',
    type: 'clusterroles',
  });

  /**
   * API resource information for RoleBinding.
   */
  public static readonly ROLE_BINDING = new ApiResource({
    apiGroup: 'rbac.authorization.k8s.io',
    type: 'rolebindings',
  });

  /**
   * API resource information for Role.
   */
  public static readonly ROLE = new ApiResource({
    apiGroup: 'rbac.authorization.k8s.io',
    type: 'roles',
  });

  /**
   * API resource information for PriorityClass.
   */
  public static readonly PRIORITY_CLASS = new ApiResource({
    apiGroup: 'scheduling.k8s.io',
    type: 'priorityclasses',
  });

  /**
   * API resource information for CSIDriver.
   */
  public static readonly CSI_DRIVER = new ApiResource({
    apiGroup: 'storage.k8s.io',
    type: 'csidrivers',
  });

  /**
   * API resource information for CSINode.
   */
  public static readonly CSI_NODE = new ApiResource({
    apiGroup: 'storage.k8s.io',
    type: 'csinodes',
  });

  /**
   * API resource information for CSIStorageCapacity.
   */
  public static readonly CSI_STORAGE_CAPACITY = new ApiResource({
    apiGroup: 'storage.k8s.io',
    type: 'csistoragecapacities',
  });

  /**
   * API resource information for StorageClass.
   */
  public static readonly STORAGE_CLASS = new ApiResource({
    apiGroup: 'storage.k8s.io',
    type: 'storageclasses',
  });

  /**
   * API resource information for VolumeAttachment.
   */
  public static readonly VOLUME_ATTACHMENT = new ApiResource({
    apiGroup: 'storage.k8s.io',
    type: 'volumeattachments',
  });

  public static custom(options: ApiResourceOptions): ApiResource {
    return new ApiResource(options);
  };

  /**
   * The group portion of the API version (e.g. `authorization.k8s.io`).
   */
  public readonly apiGroup: string;

  /**
   * The name of the resource type as it appears in the relevant API endpoint.
   * @example - "pods" or "pods/log"
   * @see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#referring-to-resources
   */
  public readonly type: string | undefined; // must be optional to satisfy interface

  private constructor(options: ApiResourceOptions) {
    this.apiGroup = options.apiGroup;
    this.type = options.type;
  }
}
