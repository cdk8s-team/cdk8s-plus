// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can select pods 1`] = `
Object {
  "matchExpressions": Array [
    Object {
      "key": "key",
      "operator": "Exists",
      "values": undefined,
    },
  ],
  "matchLabels": Object {
    "foo": "bar",
  },
}
`;

exports[`can select pods 2`] = `
Object {
  "matchExpressions": undefined,
  "matchLabels": Object {
    "foo": "bar",
  },
}
`;

exports[`connections | allowFrom defaults to pod container ports 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "ports": Array [
            Object {
              "containerPort": 6379,
            },
          ],
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressdff75f76f6ad70ca44cc27f5d7cf0a85-c8895d77",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [
            Object {
              "port": 6379,
              "protocol": "TCP",
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowegressobjectobjectdff75f76f6ad70ca44cc27-c86eaebf",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [
            Object {
              "port": 6379,
              "protocol": "TCP",
            },
          ],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
]
`;

exports[`connections | allowFrom defaults to source namespace when peer doesnt define a namespace selector 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
      "namespace": "n1",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressbe6cd2f06f348758b20bb1d4385d734a-c8cf531c",
      "namespace": "n1",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "podSelector": Object {
                "matchLabels": Object {
                  "app": "web",
                },
              },
            },
          ],
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowegressobjectobjectbe6cd2f06f348758b20bb1-c8633498",
      "namespace": "n1",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "n1",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "app": "web",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
]
`;

exports[`connections | allowFrom with peer isolation creates only egress policy on peer 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowegressobjectobjectdff75f76f6ad70ca44cc27-c86eaebf",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`connections | allowFrom with pod isolation creates only ingress policy on pod 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressdff75f76f6ad70ca44cc27f5d7cf0a85-c8895d77",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`connections | allowTo defaults to peer container ports 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "w-allowegress1d25db73da3d3c4e690a80f3df5dac03-c865025c",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [
            Object {
              "port": 6379,
              "protocol": "TCP",
            },
          ],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressobjectobject1d25db73da3d3c4e690a8-c84aef56",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [
            Object {
              "port": 6379,
              "protocol": "TCP",
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "ports": Array [
            Object {
              "containerPort": 6379,
            },
          ],
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`connections | allowTo with peer isolation creates only ingress policy on peer 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressobjectobject1d25db73da3d3c4e690a8-c84aef56",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
]
`;

exports[`connections | allowTo with pod isolation creates only egress policy on pod 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "w-allowegress1d25db73da3d3c4e690a80f3df5dac03-c865025c",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
]
`;

exports[`connections | can allow from all pods 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingress6656fb86cd5e129695657c4f69ce44ca-c8697ea0",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "podSelector": Object {},
            },
          ],
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowegressobjectobject6656fb86cd5e129695657c-c8931ff7",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {},
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
]
`;

exports[`connections | can allow from ip block 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressc88db22008a01c8e2b472a6a5ce6991f-c8909868",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "ipBlock": Object {
                "cidr": "0.0.0.0/0",
              },
            },
          ],
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
]
`;

exports[`connections | can allow from managed pod 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressdff75f76f6ad70ca44cc27f5d7cf0a85-c8895d77",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowegressobjectobjectdff75f76f6ad70ca44cc27-c86eaebf",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
]
`;

exports[`connections | can allow from managed workload resource 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "minReadySeconds": 0,
      "progressDeadlineSeconds": 600,
      "replicas": 1,
      "selector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "strategy": Object {
        "rollingUpdate": Object {
          "maxSurge": "25%",
          "maxUnavailable": "25%",
        },
        "type": "RollingUpdate",
      },
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
          },
        },
        "spec": Object {
          "automountServiceAccountToken": true,
          "containers": Array [
            Object {
              "image": "redis",
              "imagePullPolicy": "Always",
              "name": "main",
              "securityContext": Object {
                "privileged": false,
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": false,
              },
            },
          ],
          "dnsPolicy": "ClusterFirst",
          "securityContext": Object {
            "fsGroupChangePolicy": "Always",
            "runAsNonRoot": false,
          },
          "setHostnameAsFQDN": false,
        },
      },
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressdff75f76f6ad70ca44cc27f5d7cf0a85-c8895d77",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowegressobjectobjectdff75f76f6ad70ca44cc27-c86eaebf",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
]
`;

exports[`connections | can allow from peer across namespaces 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
      "namespace": "n1",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
      "namespace": "n2",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingress05e01be54b16918407a137f6f39b0f9e-c88d4b77",
      "namespace": "n2",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "n1",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowegressobjectobject05e01be54b16918407a137-c857dec1",
      "namespace": "n1",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "n2",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
]
`;

exports[`connections | can allow from selected pods 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressbe6cd2f06f348758b20bb1d4385d734a-c8cf531c",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "podSelector": Object {
                "matchLabels": Object {
                  "app": "web",
                },
              },
            },
          ],
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowegressobjectobjectbe6cd2f06f348758b20bb1-c8633498",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "app": "web",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
]
`;

exports[`connections | can allow to all pods 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "w-allowegress6656fb86cd5e129695657c4f69ce44ca-c89192c6",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
          "to": Array [
            Object {
              "podSelector": Object {},
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressobjectobject6656fb86cd5e129695657-c8a0ae52",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [
            Object {
              "endPort": 65535,
              "port": 0,
              "protocol": "TCP",
            },
          ],
        },
      ],
      "podSelector": Object {},
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
]
`;

exports[`connections | can allow to ip block 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "w-allowegressc88db22008a01c8e2b472a6a5ce6991f-c8b4de86",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [],
          "to": Array [
            Object {
              "ipBlock": Object {
                "cidr": "0.0.0.0/0",
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
]
`;

exports[`connections | can allow to managed pod 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "w-allowegress1d25db73da3d3c4e690a80f3df5dac03-c865025c",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressobjectobject1d25db73da3d3c4e690a8-c84aef56",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`connections | can allow to managed workload resource 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "w-allowegress1d25db73da3d3c4e690a80f3df5dac03-c865025c",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressobjectobject1d25db73da3d3c4e690a8-c84aef56",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "minReadySeconds": 0,
      "progressDeadlineSeconds": 600,
      "replicas": 1,
      "selector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "strategy": Object {
        "rollingUpdate": Object {
          "maxSurge": "25%",
          "maxUnavailable": "25%",
        },
        "type": "RollingUpdate",
      },
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
          },
        },
        "spec": Object {
          "automountServiceAccountToken": true,
          "containers": Array [
            Object {
              "image": "redis",
              "imagePullPolicy": "Always",
              "name": "main",
              "securityContext": Object {
                "privileged": false,
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": false,
              },
            },
          ],
          "dnsPolicy": "ClusterFirst",
          "securityContext": Object {
            "fsGroupChangePolicy": "Always",
            "runAsNonRoot": false,
          },
          "setHostnameAsFQDN": false,
        },
      },
    },
  },
]
`;

exports[`connections | can allow to peer across namespaces 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
      "namespace": "n1",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "w-allowegressa1a0cf87b3cd8b3cdcad9d95e72f06f5-c8994492",
      "namespace": "n1",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [],
          "to": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "n2",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressobjectobjecta1a0cf87b3cd8b3cdcad9-c84321b7",
      "namespace": "n2",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "n1",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
      "namespace": "n2",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`connections | can allow to selected pods 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "w-allowegress9f3b29b64cac82aabbd9f4c4b446b0b5-c84e145f",
      "namespace": "default",
    },
    "spec": Object {
      "egress": Array [
        Object {
          "ports": Array [],
          "to": Array [
            Object {
              "podSelector": Object {
                "matchLabels": Object {
                  "app": "store",
                },
              },
            },
          ],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
        },
      },
      "policyTypes": Array [
        "Egress",
      ],
    },
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": Object {
      "name": "allowingressobjectobject9f3b29b64cac82aabbd9f-c88518bf",
      "namespace": "default",
    },
    "spec": Object {
      "ingress": Array [
        Object {
          "from": Array [
            Object {
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "kubernetes.io/metadata.name": "default",
                },
              },
              "podSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
                },
              },
            },
          ],
          "ports": Array [],
        },
      ],
      "podSelector": Object {
        "matchLabels": Object {
          "app": "store",
        },
      },
      "policyTypes": Array [
        "Ingress",
      ],
    },
  },
]
`;

exports[`defaults 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Pod-c815bc91",
      },
      "name": "test-pod-c890e1b8",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "image",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be assigned to a node by name 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "nodeName": "node1",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be attracted to a node by selector - custom 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "affinity": Object {
        "nodeAffinity": Object {
          "preferredDuringSchedulingIgnoredDuringExecution": Array [
            Object {
              "preference": Object {
                "matchExpressions": Array [
                  Object {
                    "key": "memory",
                    "operator": "In",
                    "values": Array [
                      "high",
                    ],
                  },
                ],
              },
              "weight": 1,
            },
          ],
        },
      },
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be attracted to a node by selector - default 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "affinity": Object {
        "nodeAffinity": Object {
          "requiredDuringSchedulingIgnoredDuringExecution": Object {
            "nodeSelectorTerms": Array [
              Object {
                "matchExpressions": Array [
                  Object {
                    "key": "memory",
                    "operator": "In",
                    "values": Array [
                      "high",
                    ],
                  },
                ],
              },
            ],
          },
        },
      },
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be co-located with a managed pod - custom 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "affinity": Object {
        "podAffinity": Object {
          "preferredDuringSchedulingIgnoredDuringExecution": Array [
            Object {
              "podAffinityTerm": Object {
                "labelSelector": Object {
                  "matchLabels": Object {
                    "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                  },
                },
                "namespaces": Array [
                  "default",
                ],
                "topologyKey": "topology.kubernetes.io/zone",
              },
              "weight": 1,
            },
          ],
        },
      },
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be co-located with a managed pod - default 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "affinity": Object {
        "podAffinity": Object {
          "requiredDuringSchedulingIgnoredDuringExecution": Array [
            Object {
              "labelSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
              "namespaces": Array [
                "default",
              ],
              "topologyKey": "kubernetes.io/hostname",
            },
          ],
        },
      },
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be co-located with an unmanaged pod - custom 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "affinity": Object {
        "podAffinity": Object {
          "preferredDuringSchedulingIgnoredDuringExecution": Array [
            Object {
              "podAffinityTerm": Object {
                "labelSelector": Object {
                  "matchLabels": Object {
                    "app": "store",
                  },
                },
                "topologyKey": "topology.kubernetes.io/zone",
              },
              "weight": 1,
            },
          ],
        },
      },
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be co-located with an unmanaged pod - default 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "affinity": Object {
        "podAffinity": Object {
          "requiredDuringSchedulingIgnoredDuringExecution": Array [
            Object {
              "labelSelector": Object {
                "matchLabels": Object {
                  "app": "store",
                },
              },
              "namespaceSelector": Object {},
              "topologyKey": "kubernetes.io/hostname",
            },
          ],
        },
      },
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be separated from a managed pod - custom 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "affinity": Object {
        "podAntiAffinity": Object {
          "preferredDuringSchedulingIgnoredDuringExecution": Array [
            Object {
              "podAffinityTerm": Object {
                "labelSelector": Object {
                  "matchLabels": Object {
                    "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                  },
                },
                "namespaces": Array [
                  "default",
                ],
                "topologyKey": "topology.kubernetes.io/zone",
              },
              "weight": 1,
            },
          ],
        },
      },
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be separated from a managed pod - default 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "affinity": Object {
        "podAntiAffinity": Object {
          "requiredDuringSchedulingIgnoredDuringExecution": Array [
            Object {
              "labelSelector": Object {
                "matchLabels": Object {
                  "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
                },
              },
              "namespaces": Array [
                "default",
              ],
              "topologyKey": "kubernetes.io/hostname",
            },
          ],
        },
      },
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be separated from an unmanaged pod - custom 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "affinity": Object {
        "podAntiAffinity": Object {
          "preferredDuringSchedulingIgnoredDuringExecution": Array [
            Object {
              "podAffinityTerm": Object {
                "labelSelector": Object {
                  "matchLabels": Object {
                    "app": "store",
                  },
                },
                "topologyKey": "topology.kubernetes.io/zone",
              },
              "weight": 1,
            },
          ],
        },
      },
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can be separated from an unmanaged pod - default 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Web-c8b65d84",
      },
      "name": "test-web-c854d28f",
    },
    "spec": Object {
      "affinity": Object {
        "podAntiAffinity": Object {
          "requiredDuringSchedulingIgnoredDuringExecution": Array [
            Object {
              "labelSelector": Object {
                "matchLabels": Object {
                  "app": "store",
                },
              },
              "namespaceSelector": Object {
                "matchLabels": Object {
                  "net": "1",
                },
              },
              "namespaces": Array [
                "web",
              ],
              "topologyKey": "kubernetes.io/hostname",
            },
          ],
        },
      },
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "web",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
    },
  },
]
`;

exports[`scheduling can tolerate tainted nodes 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": Object {
      "labels": Object {
        "cdk8s.io/metadata.addr": "test-Redis-c8b1633b",
      },
      "name": "test-redis-c870fe8d",
    },
    "spec": Object {
      "automountServiceAccountToken": true,
      "containers": Array [
        Object {
          "image": "redis",
          "imagePullPolicy": "Always",
          "name": "main",
          "securityContext": Object {
            "privileged": false,
            "readOnlyRootFilesystem": false,
            "runAsNonRoot": false,
          },
        },
      ],
      "dnsPolicy": "ClusterFirst",
      "securityContext": Object {
        "fsGroupChangePolicy": "Always",
        "runAsNonRoot": false,
      },
      "setHostnameAsFQDN": false,
      "tolerations": Array [
        Object {
          "key": "key1",
          "operator": "Equal",
          "value": "value1",
        },
        Object {
          "effect": "PreferNoSchedule",
          "key": "key2",
          "operator": "Equal",
          "value": "value2",
        },
        Object {
          "key": "key3",
          "operator": "Exists",
        },
        Object {
          "effect": "NoSchedule",
          "key": "key4",
          "operator": "Exists",
        },
        Object {
          "effect": "NoExecute",
          "key": "key5",
          "operator": "Equal",
          "tolerationSeconds": 3600,
          "value": "value5",
        },
        Object {
          "operator": "Exists",
        },
      ],
    },
  },
]
`;
