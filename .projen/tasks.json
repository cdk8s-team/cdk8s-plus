{
  "tasks": {
    "backport": {
      "name": "backport",
      "requiredEnv": [
        "BACKPORT_PR_NUMBER",
        "GITHUB_TOKEN"
      ],
      "steps": [
        {
          "exec": "rm -rf /tmp/.backport/"
        },
        {
          "exec": "mkdir -p /tmp/.backport/"
        },
        {
          "exec": "cp .backportrc.json /tmp/.backport/"
        },
        {
          "exec": "npx backport --accesstoken ${GITHUB_TOKEN} --pr ${BACKPORT_PR_NUMBER} --non-interactive",
          "cwd": "/tmp/.backport/"
        }
      ]
    },
    "backport:22": {
      "name": "backport:22",
      "requiredEnv": [
        "BACKPORT_PR_NUMBER",
        "GITHUB_TOKEN"
      ],
      "steps": [
        {
          "exec": "rm -rf /tmp/.backport/"
        },
        {
          "exec": "mkdir -p /tmp/.backport/"
        },
        {
          "exec": "cp .backportrc.json /tmp/.backport/"
        },
        {
          "exec": "npx backport --accesstoken ${GITHUB_TOKEN} --pr ${BACKPORT_PR_NUMBER} --branch k8s-22/main",
          "cwd": "/tmp/.backport/"
        }
      ]
    },
    "backport:23": {
      "name": "backport:23",
      "requiredEnv": [
        "BACKPORT_PR_NUMBER",
        "GITHUB_TOKEN"
      ],
      "steps": [
        {
          "exec": "rm -rf /tmp/.backport/"
        },
        {
          "exec": "mkdir -p /tmp/.backport/"
        },
        {
          "exec": "cp .backportrc.json /tmp/.backport/"
        },
        {
          "exec": "npx backport --accesstoken ${GITHUB_TOKEN} --pr ${BACKPORT_PR_NUMBER} --branch k8s-23/main",
          "cwd": "/tmp/.backport/"
        }
      ]
    },
    "backport:24": {
      "name": "backport:24",
      "requiredEnv": [
        "BACKPORT_PR_NUMBER",
        "GITHUB_TOKEN"
      ],
      "steps": [
        {
          "exec": "rm -rf /tmp/.backport/"
        },
        {
          "exec": "mkdir -p /tmp/.backport/"
        },
        {
          "exec": "cp .backportrc.json /tmp/.backport/"
        },
        {
          "exec": "npx backport --accesstoken ${GITHUB_TOKEN} --pr ${BACKPORT_PR_NUMBER} --branch k8s-24/main",
          "cwd": "/tmp/.backport/"
        }
      ]
    },
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "cdk8s-plus-24/"
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "spawn": "import"
        },
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "spawn": "docgen:typescript"
        },
        {
          "spawn": "docgen:python"
        },
        {
          "spawn": "docgen:java"
        }
      ]
    },
    "docgen:java": {
      "name": "docgen:java",
      "steps": [
        {
          "exec": "mkdir -p docs && jsii-docgen -l java -o docs/java.md"
        }
      ]
    },
    "docgen:python": {
      "name": "docgen:python",
      "steps": [
        {
          "exec": "mkdir -p docs && jsii-docgen -l python -o docs/python.md"
        }
      ]
    },
    "docgen:typescript": {
      "name": "docgen:typescript",
      "steps": [
        {
          "exec": "mkdir -p docs && jsii-docgen -l typescript -o docs/typescript.md"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.ts"
        }
      ]
    },
    "import": {
      "name": "import",
      "description": "Updates imports based on latest version of cdk8s-cli.",
      "steps": [
        {
          "exec": "cdk8s -l typescript -o src/imports import k8s@1.24.0"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "if [ ! -z ${CI} ]; then mkdir -p dist && rsync -a . dist --exclude .git --exclude node_modules; else npx projen package-all; fi"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        },
        {
          "spawn": "package:java"
        },
        {
          "spawn": "package:python"
        },
        {
          "spawn": "package:dotnet"
        },
        {
          "spawn": "package:go"
        }
      ]
    },
    "package:dotnet": {
      "name": "package:dotnet",
      "description": "Create dotnet language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target dotnet"
        }
      ]
    },
    "package:go": {
      "name": "package:go",
      "description": "Create go language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target go"
        }
      ]
    },
    "package:java": {
      "name": "package:java",
      "description": "Create java language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target java"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "regenerate-api-information": {
      "name": "regenerate-api-information",
      "description": "Regenerate the information about the kubernetes API needed for auto-generating source code files. Requires access to a kubernetes cluster.",
      "steps": [
        {
          "exec": "kubectl api-resources -o wide > api-resources.txt"
        }
      ]
    },
    "release:k8s-24/main": {
      "name": "release:k8s-24/main",
      "description": "Prepare a release from \"k8s-24/main\" branch",
      "env": {
        "RELEASE": "true",
        "MAJOR": "2",
        "PRERELEASE": "rc",
        "RELEASE_TAG_PREFIX": "cdk8s-plus-24/"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --coverageProvider=v8"
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "cdk8s-plus-24/"
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "yarn upgrade npm-check-updates"
        },
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
